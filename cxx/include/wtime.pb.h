// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wtime.proto

#ifndef PROTOBUF_INCLUDED_wtime_2eproto
#define PROTOBUF_INCLUDED_wtime_2eproto

#include "internal/times_internal.h"

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/wrappers.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_wtime_2eproto TIMES_API

namespace protobuf_wtime_2eproto {
// Internal implementation detail -- do not use these members.
struct TIMES_API TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void TIMES_API AddDescriptors();
}  // namespace protobuf_wtime_2eproto
namespace HSS {
namespace Times {
class WTime;
class WTimeDefaultTypeInternal;
TIMES_API extern WTimeDefaultTypeInternal _WTime_default_instance_;
class WTimeSpan;
class WTimeSpanDefaultTypeInternal;
TIMES_API extern WTimeSpanDefaultTypeInternal _WTimeSpan_default_instance_;
}  // namespace Times
}  // namespace HSS
namespace google {
namespace protobuf {
template<> TIMES_API ::HSS::Times::WTime* Arena::CreateMaybeMessage<::HSS::Times::WTime>(Arena*);
template<> TIMES_API ::HSS::Times::WTimeSpan* Arena::CreateMaybeMessage<::HSS::Times::WTimeSpan>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace HSS {
namespace Times {

// ===================================================================

class TIMES_API WTime : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HSS.Times.WTime) */ {
 public:
  WTime();
  virtual ~WTime();

  WTime(const WTime& from);

  inline WTime& operator=(const WTime& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WTime(WTime&& from) noexcept
    : WTime() {
    *this = ::std::move(from);
  }

  inline WTime& operator=(WTime&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WTime& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WTime* internal_default_instance() {
    return reinterpret_cast<const WTime*>(
               &_WTime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(WTime* other);
  friend void swap(WTime& a, WTime& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WTime* New() const final {
    return CreateMaybeMessage<WTime>(NULL);
  }

  WTime* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WTime>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WTime& from);
  void MergeFrom(const WTime& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WTime* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // .google.protobuf.StringValue daylight = 2;
  bool has_daylight() const;
  void clear_daylight();
  static const int kDaylightFieldNumber = 2;
  private:
  const ::google::protobuf::StringValue& _internal_daylight() const;
  public:
  const ::google::protobuf::StringValue& daylight() const;
  ::google::protobuf::StringValue* release_daylight();
  ::google::protobuf::StringValue* mutable_daylight();
  void set_allocated_daylight(::google::protobuf::StringValue* daylight);

  // .google.protobuf.StringValue timezone = 3;
  bool has_timezone() const;
  void clear_timezone();
  static const int kTimezoneFieldNumber = 3;
  private:
  const ::google::protobuf::StringValue& _internal_timezone() const;
  public:
  const ::google::protobuf::StringValue& timezone() const;
  ::google::protobuf::StringValue* release_timezone();
  ::google::protobuf::StringValue* mutable_timezone();
  void set_allocated_timezone(::google::protobuf::StringValue* timezone);

  // @@protoc_insertion_point(class_scope:HSS.Times.WTime)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  ::google::protobuf::StringValue* daylight_;
  ::google::protobuf::StringValue* timezone_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_wtime_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TIMES_API WTimeSpan : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:HSS.Times.WTimeSpan) */ {
 public:
  WTimeSpan();
  virtual ~WTimeSpan();

  WTimeSpan(const WTimeSpan& from);

  inline WTimeSpan& operator=(const WTimeSpan& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WTimeSpan(WTimeSpan&& from) noexcept
    : WTimeSpan() {
    *this = ::std::move(from);
  }

  inline WTimeSpan& operator=(WTimeSpan&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const WTimeSpan& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WTimeSpan* internal_default_instance() {
    return reinterpret_cast<const WTimeSpan*>(
               &_WTimeSpan_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(WTimeSpan* other);
  friend void swap(WTimeSpan& a, WTimeSpan& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WTimeSpan* New() const final {
    return CreateMaybeMessage<WTimeSpan>(NULL);
  }

  WTimeSpan* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WTimeSpan>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WTimeSpan& from);
  void MergeFrom(const WTimeSpan& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WTimeSpan* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string time = 1;
  void clear_time();
  static const int kTimeFieldNumber = 1;
  const ::std::string& time() const;
  void set_time(const ::std::string& value);
  #if LANG_CXX11
  void set_time(::std::string&& value);
  #endif
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  ::std::string* mutable_time();
  ::std::string* release_time();
  void set_allocated_time(::std::string* time);

  // @@protoc_insertion_point(class_scope:HSS.Times.WTimeSpan)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_wtime_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// WTime

// string time = 1;
inline void WTime::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WTime::time() const {
  // @@protoc_insertion_point(field_get:HSS.Times.WTime.time)
  return time_.GetNoArena();
}
inline void WTime::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HSS.Times.WTime.time)
}
#if LANG_CXX11
inline void WTime::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HSS.Times.WTime.time)
}
#endif
inline void WTime::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HSS.Times.WTime.time)
}
inline void WTime::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HSS.Times.WTime.time)
}
inline ::std::string* WTime::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:HSS.Times.WTime.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WTime::release_time() {
  // @@protoc_insertion_point(field_release:HSS.Times.WTime.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WTime::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:HSS.Times.WTime.time)
}

// .google.protobuf.StringValue daylight = 2;
inline bool WTime::has_daylight() const {
  return this != internal_default_instance() && daylight_ != NULL;
}
inline const ::google::protobuf::StringValue& WTime::_internal_daylight() const {
  return *daylight_;
}
inline const ::google::protobuf::StringValue& WTime::daylight() const {
  const ::google::protobuf::StringValue* p = daylight_;
  // @@protoc_insertion_point(field_get:HSS.Times.WTime.daylight)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* WTime::release_daylight() {
  // @@protoc_insertion_point(field_release:HSS.Times.WTime.daylight)
  
  ::google::protobuf::StringValue* temp = daylight_;
  daylight_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* WTime::mutable_daylight() {
  
  if (daylight_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    daylight_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HSS.Times.WTime.daylight)
  return daylight_;
}
inline void WTime::set_allocated_daylight(::google::protobuf::StringValue* daylight) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(daylight_);
  }
  if (daylight) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(daylight)->GetArena();
    if (message_arena != submessage_arena) {
      daylight = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, daylight, submessage_arena);
    }
    
  } else {
    
  }
  daylight_ = daylight;
  // @@protoc_insertion_point(field_set_allocated:HSS.Times.WTime.daylight)
}

// .google.protobuf.StringValue timezone = 3;
inline bool WTime::has_timezone() const {
  return this != internal_default_instance() && timezone_ != NULL;
}
inline const ::google::protobuf::StringValue& WTime::_internal_timezone() const {
  return *timezone_;
}
inline const ::google::protobuf::StringValue& WTime::timezone() const {
  const ::google::protobuf::StringValue* p = timezone_;
  // @@protoc_insertion_point(field_get:HSS.Times.WTime.timezone)
  return p != NULL ? *p : *reinterpret_cast<const ::google::protobuf::StringValue*>(
      &::google::protobuf::_StringValue_default_instance_);
}
inline ::google::protobuf::StringValue* WTime::release_timezone() {
  // @@protoc_insertion_point(field_release:HSS.Times.WTime.timezone)
  
  ::google::protobuf::StringValue* temp = timezone_;
  timezone_ = NULL;
  return temp;
}
inline ::google::protobuf::StringValue* WTime::mutable_timezone() {
  
  if (timezone_ == NULL) {
    auto* p = CreateMaybeMessage<::google::protobuf::StringValue>(GetArenaNoVirtual());
    timezone_ = p;
  }
  // @@protoc_insertion_point(field_mutable:HSS.Times.WTime.timezone)
  return timezone_;
}
inline void WTime::set_allocated_timezone(::google::protobuf::StringValue* timezone) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timezone_);
  }
  if (timezone) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(timezone)->GetArena();
    if (message_arena != submessage_arena) {
      timezone = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timezone, submessage_arena);
    }
    
  } else {
    
  }
  timezone_ = timezone;
  // @@protoc_insertion_point(field_set_allocated:HSS.Times.WTime.timezone)
}

// -------------------------------------------------------------------

// WTimeSpan

// string time = 1;
inline void WTimeSpan::clear_time() {
  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WTimeSpan::time() const {
  // @@protoc_insertion_point(field_get:HSS.Times.WTimeSpan.time)
  return time_.GetNoArena();
}
inline void WTimeSpan::set_time(const ::std::string& value) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:HSS.Times.WTimeSpan.time)
}
#if LANG_CXX11
inline void WTimeSpan::set_time(::std::string&& value) {
  
  time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:HSS.Times.WTimeSpan.time)
}
#endif
inline void WTimeSpan::set_time(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:HSS.Times.WTimeSpan.time)
}
inline void WTimeSpan::set_time(const char* value, size_t size) {
  
  time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:HSS.Times.WTimeSpan.time)
}
inline ::std::string* WTimeSpan::mutable_time() {
  
  // @@protoc_insertion_point(field_mutable:HSS.Times.WTimeSpan.time)
  return time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WTimeSpan::release_time() {
  // @@protoc_insertion_point(field_release:HSS.Times.WTimeSpan.time)
  
  return time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WTimeSpan::set_allocated_time(::std::string* time) {
  if (time != NULL) {
    
  } else {
    
  }
  time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), time);
  // @@protoc_insertion_point(field_set_allocated:HSS.Times.WTimeSpan.time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Times
}  // namespace HSS

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_wtime_2eproto
