// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wtime.proto

#include "wtime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace HSS {
namespace Times {
PROTOBUF_CONSTEXPR WTime::WTime(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.daylight_)*/nullptr
  , /*decltype(_impl_.timezone_)*/nullptr
  , /*decltype(_impl_.timezone_id_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WTimeDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WTimeDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WTimeDefaultTypeInternal() {}
  union {
    WTime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WTimeDefaultTypeInternal _WTime_default_instance_;
PROTOBUF_CONSTEXPR WTimeSpan::WTimeSpan(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.time_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WTimeSpanDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WTimeSpanDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WTimeSpanDefaultTypeInternal() {}
  union {
    WTimeSpan _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WTimeSpanDefaultTypeInternal _WTimeSpan_default_instance_;
PROTOBUF_CONSTEXPR WTimeZone_WTZDetails::WTimeZone_WTZDetails(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.amttimezone_)*/nullptr
  , /*decltype(_impl_.startdst_)*/nullptr
  , /*decltype(_impl_.enddst_)*/nullptr
  , /*decltype(_impl_.amtdst_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct WTimeZone_WTZDetailsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WTimeZone_WTZDetailsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WTimeZone_WTZDetailsDefaultTypeInternal() {}
  union {
    WTimeZone_WTZDetails _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WTimeZone_WTZDetailsDefaultTypeInternal _WTimeZone_WTZDetails_default_instance_;
PROTOBUF_CONSTEXPR WTimeZone_TZTimeZone::WTimeZone_TZTimeZone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.daylight_)*/false} {}
struct WTimeZone_TZTimeZoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WTimeZone_TZTimeZoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WTimeZone_TZTimeZoneDefaultTypeInternal() {}
  union {
    WTimeZone_TZTimeZone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WTimeZone_TZTimeZoneDefaultTypeInternal _WTimeZone_TZTimeZone_default_instance_;
PROTOBUF_CONSTEXPR WTimeZone::WTimeZone(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.version_)*/0
  , /*decltype(_impl_.msg_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct WTimeZoneDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WTimeZoneDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WTimeZoneDefaultTypeInternal() {}
  union {
    WTimeZone _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WTimeZoneDefaultTypeInternal _WTimeZone_default_instance_;
}  // namespace Times
}  // namespace HSS
static ::_pb::Metadata file_level_metadata_wtime_2eproto[5];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_wtime_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_wtime_2eproto = nullptr;

const uint32_t TableStruct_wtime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTime, _impl_.time_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTime, _impl_.daylight_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTime, _impl_.timezone_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTime, _impl_.timezone_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeSpan, _impl_.time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_WTZDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_WTZDetails, _impl_.amttimezone_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_WTZDetails, _impl_.startdst_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_WTZDetails, _impl_.enddst_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_WTZDetails, _impl_.amtdst_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_TZTimeZone, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_TZTimeZone, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_TZTimeZone, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone_TZTimeZone, _impl_.daylight_),
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone, _impl_.version_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::HSS::Times::WTimeZone, _impl_.msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::HSS::Times::WTime)},
  { 10, -1, -1, sizeof(::HSS::Times::WTimeSpan)},
  { 17, -1, -1, sizeof(::HSS::Times::WTimeZone_WTZDetails)},
  { 27, 35, -1, sizeof(::HSS::Times::WTimeZone_TZTimeZone)},
  { 37, -1, -1, sizeof(::HSS::Times::WTimeZone)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::HSS::Times::_WTime_default_instance_._instance,
  &::HSS::Times::_WTimeSpan_default_instance_._instance,
  &::HSS::Times::_WTimeZone_WTZDetails_default_instance_._instance,
  &::HSS::Times::_WTimeZone_TZTimeZone_default_instance_._instance,
  &::HSS::Times::_WTimeZone_default_instance_._instance,
};

const char descriptor_table_protodef_wtime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\013wtime.proto\022\tHSS.Times\032\036google/protobu"
  "f/wrappers.proto\"\253\001\n\005WTime\022\014\n\004time\030\001 \001(\t"
  "\022.\n\010daylight\030\002 \001(\0132\034.google.protobuf.Str"
  "ingValue\022.\n\010timezone\030\003 \001(\0132\034.google.prot"
  "obuf.StringValue\0224\n\013timezone_id\030\004 \001(\0132\033."
  "google.protobuf.Int32ValueB\002\030\001\"\031\n\tWTimeS"
  "pan\022\014\n\004time\030\001 \001(\t\"\245\003\n\tWTimeZone\022\017\n\007versi"
  "on\030\001 \001(\005\022\033\n\rtimezoneIndex\030\002 \001(\005B\002\030\001H\000\022>\n"
  "\017timezoneDetails\030\003 \001(\0132\037.HSS.Times.WTime"
  "Zone.WTZDetailsB\002\030\001H\000\0225\n\ntztimezone\030\004 \001("
  "\0132\037.HSS.Times.WTimeZone.TZTimeZoneH\000\032\253\001\n"
  "\nWTZDetails\022)\n\013amtTimeZone\030\001 \001(\0132\024.HSS.T"
  "imes.WTimeSpan\022&\n\010startDST\030\002 \001(\0132\024.HSS.T"
  "imes.WTimeSpan\022$\n\006endDST\030\003 \001(\0132\024.HSS.Tim"
  "es.WTimeSpan\022$\n\006amtDST\030\004 \001(\0132\024.HSS.Times"
  ".WTimeSpan\032>\n\nTZTimeZone\022\014\n\004name\030\001 \001(\t\022\025"
  "\n\010daylight\030\002 \001(\010H\000\210\001\001B\013\n\t_daylightB\005\n\003ms"
  "gB0\n\022ca.hss.times.protoB\014WTimePackageP\001\252"
  "\002\tHSS.Timesb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_wtime_2eproto_deps[1] = {
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
};
static ::_pbi::once_flag descriptor_table_wtime_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wtime_2eproto = {
    false, false, 739, descriptor_table_protodef_wtime_2eproto,
    "wtime.proto",
    &descriptor_table_wtime_2eproto_once, descriptor_table_wtime_2eproto_deps, 1, 5,
    schemas, file_default_instances, TableStruct_wtime_2eproto::offsets,
    file_level_metadata_wtime_2eproto, file_level_enum_descriptors_wtime_2eproto,
    file_level_service_descriptors_wtime_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wtime_2eproto_getter() {
  return &descriptor_table_wtime_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wtime_2eproto(&descriptor_table_wtime_2eproto);
namespace HSS {
namespace Times {

// ===================================================================

class WTime::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& daylight(const WTime* msg);
  static const ::PROTOBUF_NAMESPACE_ID::StringValue& timezone(const WTime* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Int32Value& timezone_id(const WTime* msg);
};

const ::PROTOBUF_NAMESPACE_ID::StringValue&
WTime::_Internal::daylight(const WTime* msg) {
  return *msg->_impl_.daylight_;
}
const ::PROTOBUF_NAMESPACE_ID::StringValue&
WTime::_Internal::timezone(const WTime* msg) {
  return *msg->_impl_.timezone_;
}
const ::PROTOBUF_NAMESPACE_ID::Int32Value&
WTime::_Internal::timezone_id(const WTime* msg) {
  return *msg->_impl_.timezone_id_;
}
void WTime::clear_daylight() {
  if (GetArenaForAllocation() == nullptr && _impl_.daylight_ != nullptr) {
    delete _impl_.daylight_;
  }
  _impl_.daylight_ = nullptr;
}
void WTime::clear_timezone() {
  if (GetArenaForAllocation() == nullptr && _impl_.timezone_ != nullptr) {
    delete _impl_.timezone_;
  }
  _impl_.timezone_ = nullptr;
}
void WTime::clear_timezone_id() {
  if (GetArenaForAllocation() == nullptr && _impl_.timezone_id_ != nullptr) {
    delete _impl_.timezone_id_;
  }
  _impl_.timezone_id_ = nullptr;
}
WTime::WTime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HSS.Times.WTime)
}
WTime::WTime(const WTime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WTime* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.daylight_){nullptr}
    , decltype(_impl_.timezone_){nullptr}
    , decltype(_impl_.timezone_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_daylight()) {
    _this->_impl_.daylight_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from._impl_.daylight_);
  }
  if (from._internal_has_timezone()) {
    _this->_impl_.timezone_ = new ::PROTOBUF_NAMESPACE_ID::StringValue(*from._impl_.timezone_);
  }
  if (from._internal_has_timezone_id()) {
    _this->_impl_.timezone_id_ = new ::PROTOBUF_NAMESPACE_ID::Int32Value(*from._impl_.timezone_id_);
  }
  // @@protoc_insertion_point(copy_constructor:HSS.Times.WTime)
}

inline void WTime::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , decltype(_impl_.daylight_){nullptr}
    , decltype(_impl_.timezone_){nullptr}
    , decltype(_impl_.timezone_id_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WTime::~WTime() {
  // @@protoc_insertion_point(destructor:HSS.Times.WTime)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WTime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_.Destroy();
  if (this != internal_default_instance()) delete _impl_.daylight_;
  if (this != internal_default_instance()) delete _impl_.timezone_;
  if (this != internal_default_instance()) delete _impl_.timezone_id_;
}

void WTime::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WTime::Clear() {
// @@protoc_insertion_point(message_clear_start:HSS.Times.WTime)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.daylight_ != nullptr) {
    delete _impl_.daylight_;
  }
  _impl_.daylight_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timezone_ != nullptr) {
    delete _impl_.timezone_;
  }
  _impl_.timezone_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.timezone_id_ != nullptr) {
    delete _impl_.timezone_id_;
  }
  _impl_.timezone_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WTime::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "HSS.Times.WTime.time"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue daylight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_daylight(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.StringValue timezone = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timezone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Int32Value timezone_id = 4 [deprecated = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timezone_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WTime::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HSS.Times.WTime)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HSS.Times.WTime.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  // .google.protobuf.StringValue daylight = 2;
  if (this->_internal_has_daylight()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::daylight(this),
        _Internal::daylight(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.StringValue timezone = 3;
  if (this->_internal_has_timezone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timezone(this),
        _Internal::timezone(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Int32Value timezone_id = 4 [deprecated = true];
  if (this->_internal_has_timezone_id()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::timezone_id(this),
        _Internal::timezone_id(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSS.Times.WTime)
  return target;
}

size_t WTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSS.Times.WTime)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  // .google.protobuf.StringValue daylight = 2;
  if (this->_internal_has_daylight()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.daylight_);
  }

  // .google.protobuf.StringValue timezone = 3;
  if (this->_internal_has_timezone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timezone_);
  }

  // .google.protobuf.Int32Value timezone_id = 4 [deprecated = true];
  if (this->_internal_has_timezone_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.timezone_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WTime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WTime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WTime::GetClassData() const { return &_class_data_; }


void WTime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WTime*>(&to_msg);
  auto& from = static_cast<const WTime&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HSS.Times.WTime)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  if (from._internal_has_daylight()) {
    _this->_internal_mutable_daylight()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
        from._internal_daylight());
  }
  if (from._internal_has_timezone()) {
    _this->_internal_mutable_timezone()->::PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(
        from._internal_timezone());
  }
  if (from._internal_has_timezone_id()) {
    _this->_internal_mutable_timezone_id()->::PROTOBUF_NAMESPACE_ID::Int32Value::MergeFrom(
        from._internal_timezone_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WTime::CopyFrom(const WTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSS.Times.WTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTime::IsInitialized() const {
  return true;
}

void WTime::InternalSwap(WTime* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WTime, _impl_.timezone_id_)
      + sizeof(WTime::_impl_.timezone_id_)
      - PROTOBUF_FIELD_OFFSET(WTime, _impl_.daylight_)>(
          reinterpret_cast<char*>(&_impl_.daylight_),
          reinterpret_cast<char*>(&other->_impl_.daylight_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WTime::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wtime_2eproto_getter, &descriptor_table_wtime_2eproto_once,
      file_level_metadata_wtime_2eproto[0]);
}

// ===================================================================

class WTimeSpan::_Internal {
 public:
};

WTimeSpan::WTimeSpan(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HSS.Times.WTimeSpan)
}
WTimeSpan::WTimeSpan(const WTimeSpan& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WTimeSpan* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_time().empty()) {
    _this->_impl_.time_.Set(from._internal_time(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:HSS.Times.WTimeSpan)
}

inline void WTimeSpan::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.time_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.time_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.time_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WTimeSpan::~WTimeSpan() {
  // @@protoc_insertion_point(destructor:HSS.Times.WTimeSpan)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WTimeSpan::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.time_.Destroy();
}

void WTimeSpan::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WTimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:HSS.Times.WTimeSpan)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.time_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WTimeSpan::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_time();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "HSS.Times.WTimeSpan.time"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WTimeSpan::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HSS.Times.WTimeSpan)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HSS.Times.WTimeSpan.time");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSS.Times.WTimeSpan)
  return target;
}

size_t WTimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSS.Times.WTimeSpan)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string time = 1;
  if (!this->_internal_time().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WTimeSpan::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WTimeSpan::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WTimeSpan::GetClassData() const { return &_class_data_; }


void WTimeSpan::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WTimeSpan*>(&to_msg);
  auto& from = static_cast<const WTimeSpan&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HSS.Times.WTimeSpan)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_time().empty()) {
    _this->_internal_set_time(from._internal_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WTimeSpan::CopyFrom(const WTimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSS.Times.WTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTimeSpan::IsInitialized() const {
  return true;
}

void WTimeSpan::InternalSwap(WTimeSpan* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.time_, lhs_arena,
      &other->_impl_.time_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata WTimeSpan::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wtime_2eproto_getter, &descriptor_table_wtime_2eproto_once,
      file_level_metadata_wtime_2eproto[1]);
}

// ===================================================================

class WTimeZone_WTZDetails::_Internal {
 public:
  static const ::HSS::Times::WTimeSpan& amttimezone(const WTimeZone_WTZDetails* msg);
  static const ::HSS::Times::WTimeSpan& startdst(const WTimeZone_WTZDetails* msg);
  static const ::HSS::Times::WTimeSpan& enddst(const WTimeZone_WTZDetails* msg);
  static const ::HSS::Times::WTimeSpan& amtdst(const WTimeZone_WTZDetails* msg);
};

const ::HSS::Times::WTimeSpan&
WTimeZone_WTZDetails::_Internal::amttimezone(const WTimeZone_WTZDetails* msg) {
  return *msg->_impl_.amttimezone_;
}
const ::HSS::Times::WTimeSpan&
WTimeZone_WTZDetails::_Internal::startdst(const WTimeZone_WTZDetails* msg) {
  return *msg->_impl_.startdst_;
}
const ::HSS::Times::WTimeSpan&
WTimeZone_WTZDetails::_Internal::enddst(const WTimeZone_WTZDetails* msg) {
  return *msg->_impl_.enddst_;
}
const ::HSS::Times::WTimeSpan&
WTimeZone_WTZDetails::_Internal::amtdst(const WTimeZone_WTZDetails* msg) {
  return *msg->_impl_.amtdst_;
}
WTimeZone_WTZDetails::WTimeZone_WTZDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HSS.Times.WTimeZone.WTZDetails)
}
WTimeZone_WTZDetails::WTimeZone_WTZDetails(const WTimeZone_WTZDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WTimeZone_WTZDetails* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.amttimezone_){nullptr}
    , decltype(_impl_.startdst_){nullptr}
    , decltype(_impl_.enddst_){nullptr}
    , decltype(_impl_.amtdst_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_amttimezone()) {
    _this->_impl_.amttimezone_ = new ::HSS::Times::WTimeSpan(*from._impl_.amttimezone_);
  }
  if (from._internal_has_startdst()) {
    _this->_impl_.startdst_ = new ::HSS::Times::WTimeSpan(*from._impl_.startdst_);
  }
  if (from._internal_has_enddst()) {
    _this->_impl_.enddst_ = new ::HSS::Times::WTimeSpan(*from._impl_.enddst_);
  }
  if (from._internal_has_amtdst()) {
    _this->_impl_.amtdst_ = new ::HSS::Times::WTimeSpan(*from._impl_.amtdst_);
  }
  // @@protoc_insertion_point(copy_constructor:HSS.Times.WTimeZone.WTZDetails)
}

inline void WTimeZone_WTZDetails::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.amttimezone_){nullptr}
    , decltype(_impl_.startdst_){nullptr}
    , decltype(_impl_.enddst_){nullptr}
    , decltype(_impl_.amtdst_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

WTimeZone_WTZDetails::~WTimeZone_WTZDetails() {
  // @@protoc_insertion_point(destructor:HSS.Times.WTimeZone.WTZDetails)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WTimeZone_WTZDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.amttimezone_;
  if (this != internal_default_instance()) delete _impl_.startdst_;
  if (this != internal_default_instance()) delete _impl_.enddst_;
  if (this != internal_default_instance()) delete _impl_.amtdst_;
}

void WTimeZone_WTZDetails::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WTimeZone_WTZDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:HSS.Times.WTimeZone.WTZDetails)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.amttimezone_ != nullptr) {
    delete _impl_.amttimezone_;
  }
  _impl_.amttimezone_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.startdst_ != nullptr) {
    delete _impl_.startdst_;
  }
  _impl_.startdst_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.enddst_ != nullptr) {
    delete _impl_.enddst_;
  }
  _impl_.enddst_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.amtdst_ != nullptr) {
    delete _impl_.amtdst_;
  }
  _impl_.amtdst_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WTimeZone_WTZDetails::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .HSS.Times.WTimeSpan amtTimeZone = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_amttimezone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HSS.Times.WTimeSpan startDST = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_startdst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HSS.Times.WTimeSpan endDST = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_enddst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HSS.Times.WTimeSpan amtDST = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_amtdst(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WTimeZone_WTZDetails::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HSS.Times.WTimeZone.WTZDetails)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .HSS.Times.WTimeSpan amtTimeZone = 1;
  if (this->_internal_has_amttimezone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::amttimezone(this),
        _Internal::amttimezone(this).GetCachedSize(), target, stream);
  }

  // .HSS.Times.WTimeSpan startDST = 2;
  if (this->_internal_has_startdst()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::startdst(this),
        _Internal::startdst(this).GetCachedSize(), target, stream);
  }

  // .HSS.Times.WTimeSpan endDST = 3;
  if (this->_internal_has_enddst()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::enddst(this),
        _Internal::enddst(this).GetCachedSize(), target, stream);
  }

  // .HSS.Times.WTimeSpan amtDST = 4;
  if (this->_internal_has_amtdst()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::amtdst(this),
        _Internal::amtdst(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSS.Times.WTimeZone.WTZDetails)
  return target;
}

size_t WTimeZone_WTZDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSS.Times.WTimeZone.WTZDetails)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .HSS.Times.WTimeSpan amtTimeZone = 1;
  if (this->_internal_has_amttimezone()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amttimezone_);
  }

  // .HSS.Times.WTimeSpan startDST = 2;
  if (this->_internal_has_startdst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.startdst_);
  }

  // .HSS.Times.WTimeSpan endDST = 3;
  if (this->_internal_has_enddst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.enddst_);
  }

  // .HSS.Times.WTimeSpan amtDST = 4;
  if (this->_internal_has_amtdst()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.amtdst_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WTimeZone_WTZDetails::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WTimeZone_WTZDetails::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WTimeZone_WTZDetails::GetClassData() const { return &_class_data_; }


void WTimeZone_WTZDetails::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WTimeZone_WTZDetails*>(&to_msg);
  auto& from = static_cast<const WTimeZone_WTZDetails&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HSS.Times.WTimeZone.WTZDetails)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_amttimezone()) {
    _this->_internal_mutable_amttimezone()->::HSS::Times::WTimeSpan::MergeFrom(
        from._internal_amttimezone());
  }
  if (from._internal_has_startdst()) {
    _this->_internal_mutable_startdst()->::HSS::Times::WTimeSpan::MergeFrom(
        from._internal_startdst());
  }
  if (from._internal_has_enddst()) {
    _this->_internal_mutable_enddst()->::HSS::Times::WTimeSpan::MergeFrom(
        from._internal_enddst());
  }
  if (from._internal_has_amtdst()) {
    _this->_internal_mutable_amtdst()->::HSS::Times::WTimeSpan::MergeFrom(
        from._internal_amtdst());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WTimeZone_WTZDetails::CopyFrom(const WTimeZone_WTZDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSS.Times.WTimeZone.WTZDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTimeZone_WTZDetails::IsInitialized() const {
  return true;
}

void WTimeZone_WTZDetails::InternalSwap(WTimeZone_WTZDetails* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WTimeZone_WTZDetails, _impl_.amtdst_)
      + sizeof(WTimeZone_WTZDetails::_impl_.amtdst_)
      - PROTOBUF_FIELD_OFFSET(WTimeZone_WTZDetails, _impl_.amttimezone_)>(
          reinterpret_cast<char*>(&_impl_.amttimezone_),
          reinterpret_cast<char*>(&other->_impl_.amttimezone_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WTimeZone_WTZDetails::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wtime_2eproto_getter, &descriptor_table_wtime_2eproto_once,
      file_level_metadata_wtime_2eproto[2]);
}

// ===================================================================

class WTimeZone_TZTimeZone::_Internal {
 public:
  using HasBits = decltype(std::declval<WTimeZone_TZTimeZone>()._impl_._has_bits_);
  static void set_has_daylight(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

WTimeZone_TZTimeZone::WTimeZone_TZTimeZone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HSS.Times.WTimeZone.TZTimeZone)
}
WTimeZone_TZTimeZone::WTimeZone_TZTimeZone(const WTimeZone_TZTimeZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WTimeZone_TZTimeZone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.daylight_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.daylight_ = from._impl_.daylight_;
  // @@protoc_insertion_point(copy_constructor:HSS.Times.WTimeZone.TZTimeZone)
}

inline void WTimeZone_TZTimeZone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.name_){}
    , decltype(_impl_.daylight_){false}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

WTimeZone_TZTimeZone::~WTimeZone_TZTimeZone() {
  // @@protoc_insertion_point(destructor:HSS.Times.WTimeZone.TZTimeZone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WTimeZone_TZTimeZone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void WTimeZone_TZTimeZone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WTimeZone_TZTimeZone::Clear() {
// @@protoc_insertion_point(message_clear_start:HSS.Times.WTimeZone.TZTimeZone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.daylight_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WTimeZone_TZTimeZone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "HSS.Times.WTimeZone.TZTimeZone.name"));
        } else
          goto handle_unusual;
        continue;
      // optional bool daylight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_daylight(&has_bits);
          _impl_.daylight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WTimeZone_TZTimeZone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HSS.Times.WTimeZone.TZTimeZone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "HSS.Times.WTimeZone.TZTimeZone.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // optional bool daylight = 2;
  if (_internal_has_daylight()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_daylight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSS.Times.WTimeZone.TZTimeZone)
  return target;
}

size_t WTimeZone_TZTimeZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSS.Times.WTimeZone.TZTimeZone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // optional bool daylight = 2;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WTimeZone_TZTimeZone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WTimeZone_TZTimeZone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WTimeZone_TZTimeZone::GetClassData() const { return &_class_data_; }


void WTimeZone_TZTimeZone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WTimeZone_TZTimeZone*>(&to_msg);
  auto& from = static_cast<const WTimeZone_TZTimeZone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HSS.Times.WTimeZone.TZTimeZone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_daylight()) {
    _this->_internal_set_daylight(from._internal_daylight());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WTimeZone_TZTimeZone::CopyFrom(const WTimeZone_TZTimeZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSS.Times.WTimeZone.TZTimeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTimeZone_TZTimeZone::IsInitialized() const {
  return true;
}

void WTimeZone_TZTimeZone::InternalSwap(WTimeZone_TZTimeZone* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.daylight_, other->_impl_.daylight_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WTimeZone_TZTimeZone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wtime_2eproto_getter, &descriptor_table_wtime_2eproto_once,
      file_level_metadata_wtime_2eproto[3]);
}

// ===================================================================

class WTimeZone::_Internal {
 public:
  static const ::HSS::Times::WTimeZone_WTZDetails& timezonedetails(const WTimeZone* msg);
  static const ::HSS::Times::WTimeZone_TZTimeZone& tztimezone(const WTimeZone* msg);
};

const ::HSS::Times::WTimeZone_WTZDetails&
WTimeZone::_Internal::timezonedetails(const WTimeZone* msg) {
  return *msg->_impl_.msg_.timezonedetails_;
}
const ::HSS::Times::WTimeZone_TZTimeZone&
WTimeZone::_Internal::tztimezone(const WTimeZone* msg) {
  return *msg->_impl_.msg_.tztimezone_;
}
void WTimeZone::set_allocated_timezonedetails(::HSS::Times::WTimeZone_WTZDetails* timezonedetails) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (timezonedetails) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(timezonedetails);
    if (message_arena != submessage_arena) {
      timezonedetails = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timezonedetails, submessage_arena);
    }
    set_has_timezonedetails();
    _impl_.msg_.timezonedetails_ = timezonedetails;
  }
  // @@protoc_insertion_point(field_set_allocated:HSS.Times.WTimeZone.timezoneDetails)
}
void WTimeZone::set_allocated_tztimezone(::HSS::Times::WTimeZone_TZTimeZone* tztimezone) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_msg();
  if (tztimezone) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(tztimezone);
    if (message_arena != submessage_arena) {
      tztimezone = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tztimezone, submessage_arena);
    }
    set_has_tztimezone();
    _impl_.msg_.tztimezone_ = tztimezone;
  }
  // @@protoc_insertion_point(field_set_allocated:HSS.Times.WTimeZone.tztimezone)
}
WTimeZone::WTimeZone(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:HSS.Times.WTimeZone)
}
WTimeZone::WTimeZone(const WTimeZone& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  WTimeZone* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.version_ = from._impl_.version_;
  clear_has_msg();
  switch (from.msg_case()) {
    case kTimezoneIndex: {
      _this->_internal_set_timezoneindex(from._internal_timezoneindex());
      break;
    }
    case kTimezoneDetails: {
      _this->_internal_mutable_timezonedetails()->::HSS::Times::WTimeZone_WTZDetails::MergeFrom(
          from._internal_timezonedetails());
      break;
    }
    case kTztimezone: {
      _this->_internal_mutable_tztimezone()->::HSS::Times::WTimeZone_TZTimeZone::MergeFrom(
          from._internal_tztimezone());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:HSS.Times.WTimeZone)
}

inline void WTimeZone::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.version_){0}
    , decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_msg();
}

WTimeZone::~WTimeZone() {
  // @@protoc_insertion_point(destructor:HSS.Times.WTimeZone)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WTimeZone::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_msg()) {
    clear_msg();
  }
}

void WTimeZone::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void WTimeZone::clear_msg() {
// @@protoc_insertion_point(one_of_clear_start:HSS.Times.WTimeZone)
  switch (msg_case()) {
    case kTimezoneIndex: {
      // No need to clear
      break;
    }
    case kTimezoneDetails: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.timezonedetails_;
      }
      break;
    }
    case kTztimezone: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.msg_.tztimezone_;
      }
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MSG_NOT_SET;
}


void WTimeZone::Clear() {
// @@protoc_insertion_point(message_clear_start:HSS.Times.WTimeZone)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.version_ = 0;
  clear_msg();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WTimeZone::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 timezoneIndex = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _internal_set_timezoneindex(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HSS.Times.WTimeZone.WTZDetails timezoneDetails = 3 [deprecated = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_timezonedetails(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .HSS.Times.WTimeZone.TZTimeZone tztimezone = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_tztimezone(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WTimeZone::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:HSS.Times.WTimeZone)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  // int32 timezoneIndex = 2 [deprecated = true];
  if (_internal_has_timezoneindex()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_timezoneindex(), target);
  }

  // .HSS.Times.WTimeZone.WTZDetails timezoneDetails = 3 [deprecated = true];
  if (_internal_has_timezonedetails()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::timezonedetails(this),
        _Internal::timezonedetails(this).GetCachedSize(), target, stream);
  }

  // .HSS.Times.WTimeZone.TZTimeZone tztimezone = 4;
  if (_internal_has_tztimezone()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::tztimezone(this),
        _Internal::tztimezone(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSS.Times.WTimeZone)
  return target;
}

size_t WTimeZone::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSS.Times.WTimeZone)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  switch (msg_case()) {
    // int32 timezoneIndex = 2 [deprecated = true];
    case kTimezoneIndex: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_timezoneindex());
      break;
    }
    // .HSS.Times.WTimeZone.WTZDetails timezoneDetails = 3 [deprecated = true];
    case kTimezoneDetails: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.timezonedetails_);
      break;
    }
    // .HSS.Times.WTimeZone.TZTimeZone tztimezone = 4;
    case kTztimezone: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.msg_.tztimezone_);
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WTimeZone::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    WTimeZone::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WTimeZone::GetClassData() const { return &_class_data_; }


void WTimeZone::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<WTimeZone*>(&to_msg);
  auto& from = static_cast<const WTimeZone&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:HSS.Times.WTimeZone)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _this->_internal_set_version(from._internal_version());
  }
  switch (from.msg_case()) {
    case kTimezoneIndex: {
      _this->_internal_set_timezoneindex(from._internal_timezoneindex());
      break;
    }
    case kTimezoneDetails: {
      _this->_internal_mutable_timezonedetails()->::HSS::Times::WTimeZone_WTZDetails::MergeFrom(
          from._internal_timezonedetails());
      break;
    }
    case kTztimezone: {
      _this->_internal_mutable_tztimezone()->::HSS::Times::WTimeZone_TZTimeZone::MergeFrom(
          from._internal_tztimezone());
      break;
    }
    case MSG_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WTimeZone::CopyFrom(const WTimeZone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSS.Times.WTimeZone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTimeZone::IsInitialized() const {
  return true;
}

void WTimeZone::InternalSwap(WTimeZone* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.version_, other->_impl_.version_);
  swap(_impl_.msg_, other->_impl_.msg_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata WTimeZone::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wtime_2eproto_getter, &descriptor_table_wtime_2eproto_once,
      file_level_metadata_wtime_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Times
}  // namespace HSS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::HSS::Times::WTime*
Arena::CreateMaybeMessage< ::HSS::Times::WTime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HSS::Times::WTime >(arena);
}
template<> PROTOBUF_NOINLINE ::HSS::Times::WTimeSpan*
Arena::CreateMaybeMessage< ::HSS::Times::WTimeSpan >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HSS::Times::WTimeSpan >(arena);
}
template<> PROTOBUF_NOINLINE ::HSS::Times::WTimeZone_WTZDetails*
Arena::CreateMaybeMessage< ::HSS::Times::WTimeZone_WTZDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HSS::Times::WTimeZone_WTZDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::HSS::Times::WTimeZone_TZTimeZone*
Arena::CreateMaybeMessage< ::HSS::Times::WTimeZone_TZTimeZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HSS::Times::WTimeZone_TZTimeZone >(arena);
}
template<> PROTOBUF_NOINLINE ::HSS::Times::WTimeZone*
Arena::CreateMaybeMessage< ::HSS::Times::WTimeZone >(Arena* arena) {
  return Arena::CreateMessageInternal< ::HSS::Times::WTimeZone >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
