// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wtime.proto

#include "wtime.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_google_2fprotobuf_2fwrappers_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_google_2fprotobuf_2fwrappers_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringValue;
}  // namespace protobuf_google_2fprotobuf_2fwrappers_2eproto
namespace HSS {
namespace Times {
class WTimeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WTime>
      _instance;
} _WTime_default_instance_;
class WTimeSpanDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WTimeSpan>
      _instance;
} _WTimeSpan_default_instance_;
}  // namespace Times
}  // namespace HSS
namespace protobuf_wtime_2eproto {
static void InitDefaultsWTime() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HSS::Times::_WTime_default_instance_;
    new (ptr) ::HSS::Times::WTime();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HSS::Times::WTime::InitAsDefaultInstance();
}

TIMES_API ::google::protobuf::internal::SCCInfo<1> scc_info_WTime =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsWTime}, {
      &protobuf_google_2fprotobuf_2fwrappers_2eproto::scc_info_StringValue.base,}};

static void InitDefaultsWTimeSpan() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::HSS::Times::_WTimeSpan_default_instance_;
    new (ptr) ::HSS::Times::WTimeSpan();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::HSS::Times::WTimeSpan::InitAsDefaultInstance();
}

TIMES_API ::google::protobuf::internal::SCCInfo<0> scc_info_WTimeSpan =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWTimeSpan}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_WTime.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WTimeSpan.base);
}

::google::protobuf::Metadata file_level_metadata[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HSS::Times::WTime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HSS::Times::WTime, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HSS::Times::WTime, daylight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HSS::Times::WTime, timezone_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HSS::Times::WTimeSpan, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::HSS::Times::WTimeSpan, time_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::HSS::Times::WTime)},
  { 8, -1, sizeof(::HSS::Times::WTimeSpan)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::HSS::Times::_WTime_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::HSS::Times::_WTimeSpan_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "wtime.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013wtime.proto\022\tHSS.Times\032\036google/protobu"
      "f/wrappers.proto\"u\n\005WTime\022\014\n\004time\030\001 \001(\t\022"
      ".\n\010daylight\030\002 \001(\0132\034.google.protobuf.Stri"
      "ngValue\022.\n\010timezone\030\003 \001(\0132\034.google.proto"
      "buf.StringValue\"\031\n\tWTimeSpan\022\014\n\004time\030\001 \001"
      "(\tB0\n\022ca.hss.times.protoB\014WTimePackageP\001"
      "\252\002\tHSS.Timesb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 260);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "wtime.proto", &protobuf_RegisterTypes);
  ::protobuf_google_2fprotobuf_2fwrappers_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_wtime_2eproto
namespace HSS {
namespace Times {

// ===================================================================

void WTime::InitAsDefaultInstance() {
  ::HSS::Times::_WTime_default_instance_._instance.get_mutable()->daylight_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
  ::HSS::Times::_WTime_default_instance_._instance.get_mutable()->timezone_ = const_cast< ::google::protobuf::StringValue*>(
      ::google::protobuf::StringValue::internal_default_instance());
}
void WTime::clear_daylight() {
  if (GetArenaNoVirtual() == NULL && daylight_ != NULL) {
    delete daylight_;
  }
  daylight_ = NULL;
}
void WTime::clear_timezone() {
  if (GetArenaNoVirtual() == NULL && timezone_ != NULL) {
    delete timezone_;
  }
  timezone_ = NULL;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WTime::kTimeFieldNumber;
const int WTime::kDaylightFieldNumber;
const int WTime::kTimezoneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WTime::WTime()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_wtime_2eproto::scc_info_WTime.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HSS.Times.WTime)
}
WTime::WTime(const WTime& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.has_daylight()) {
    daylight_ = new ::google::protobuf::StringValue(*from.daylight_);
  } else {
    daylight_ = NULL;
  }
  if (from.has_timezone()) {
    timezone_ = new ::google::protobuf::StringValue(*from.timezone_);
  } else {
    timezone_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:HSS.Times.WTime)
}

void WTime::SharedCtor() {
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&daylight_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timezone_) -
      reinterpret_cast<char*>(&daylight_)) + sizeof(timezone_));
}

WTime::~WTime() {
  // @@protoc_insertion_point(destructor:HSS.Times.WTime)
  SharedDtor();
}

void WTime::SharedDtor() {
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete daylight_;
  if (this != internal_default_instance()) delete timezone_;
}

void WTime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WTime::descriptor() {
  ::protobuf_wtime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_wtime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WTime& WTime::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_wtime_2eproto::scc_info_WTime.base);
  return *internal_default_instance();
}


void WTime::Clear() {
// @@protoc_insertion_point(message_clear_start:HSS.Times.WTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && daylight_ != NULL) {
    delete daylight_;
  }
  daylight_ = NULL;
  if (GetArenaNoVirtual() == NULL && timezone_ != NULL) {
    delete timezone_;
  }
  timezone_ = NULL;
  _internal_metadata_.Clear();
}

bool WTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HSS.Times.WTime)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), static_cast<int>(this->time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HSS.Times.WTime.time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue daylight = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_daylight()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .google.protobuf.StringValue timezone = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_timezone()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HSS.Times.WTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HSS.Times.WTime)
  return false;
#undef DO_
}

void WTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HSS.Times.WTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HSS.Times.WTime.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->time(), output);
  }

  // .google.protobuf.StringValue daylight = 2;
  if (this->has_daylight()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_daylight(), output);
  }

  // .google.protobuf.StringValue timezone = 3;
  if (this->has_timezone()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_timezone(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HSS.Times.WTime)
}

::google::protobuf::uint8* WTime::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HSS.Times.WTime)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HSS.Times.WTime.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  // .google.protobuf.StringValue daylight = 2;
  if (this->has_daylight()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_daylight(), deterministic, target);
  }

  // .google.protobuf.StringValue timezone = 3;
  if (this->has_timezone()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_timezone(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSS.Times.WTime)
  return target;
}

size_t WTime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSS.Times.WTime)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  // .google.protobuf.StringValue daylight = 2;
  if (this->has_daylight()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *daylight_);
  }

  // .google.protobuf.StringValue timezone = 3;
  if (this->has_timezone()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *timezone_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WTime::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HSS.Times.WTime)
  GOOGLE_DCHECK_NE(&from, this);
  const WTime* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WTime>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HSS.Times.WTime)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HSS.Times.WTime)
    MergeFrom(*source);
  }
}

void WTime::MergeFrom(const WTime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HSS.Times.WTime)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  if (from.has_daylight()) {
    mutable_daylight()->::google::protobuf::StringValue::MergeFrom(from.daylight());
  }
  if (from.has_timezone()) {
    mutable_timezone()->::google::protobuf::StringValue::MergeFrom(from.timezone());
  }
}

void WTime::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HSS.Times.WTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTime::CopyFrom(const WTime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSS.Times.WTime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTime::IsInitialized() const {
  return true;
}

void WTime::Swap(WTime* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WTime::InternalSwap(WTime* other) {
  using std::swap;
  time_.Swap(&other->time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(daylight_, other->daylight_);
  swap(timezone_, other->timezone_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WTime::GetMetadata() const {
  protobuf_wtime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_wtime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WTimeSpan::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WTimeSpan::kTimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WTimeSpan::WTimeSpan()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_wtime_2eproto::scc_info_WTimeSpan.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:HSS.Times.WTimeSpan)
}
WTimeSpan::WTimeSpan(const WTimeSpan& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.time().size() > 0) {
    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
  // @@protoc_insertion_point(copy_constructor:HSS.Times.WTimeSpan)
}

void WTimeSpan::SharedCtor() {
  time_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WTimeSpan::~WTimeSpan() {
  // @@protoc_insertion_point(destructor:HSS.Times.WTimeSpan)
  SharedDtor();
}

void WTimeSpan::SharedDtor() {
  time_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WTimeSpan::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WTimeSpan::descriptor() {
  ::protobuf_wtime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_wtime_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WTimeSpan& WTimeSpan::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_wtime_2eproto::scc_info_WTimeSpan.base);
  return *internal_default_instance();
}


void WTimeSpan::Clear() {
// @@protoc_insertion_point(message_clear_start:HSS.Times.WTimeSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool WTimeSpan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:HSS.Times.WTimeSpan)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->time().data(), static_cast<int>(this->time().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "HSS.Times.WTimeSpan.time"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:HSS.Times.WTimeSpan)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:HSS.Times.WTimeSpan)
  return false;
#undef DO_
}

void WTimeSpan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:HSS.Times.WTimeSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HSS.Times.WTimeSpan.time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->time(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:HSS.Times.WTimeSpan)
}

::google::protobuf::uint8* WTimeSpan::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:HSS.Times.WTimeSpan)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string time = 1;
  if (this->time().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->time().data(), static_cast<int>(this->time().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "HSS.Times.WTimeSpan.time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->time(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:HSS.Times.WTimeSpan)
  return target;
}

size_t WTimeSpan::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:HSS.Times.WTimeSpan)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string time = 1;
  if (this->time().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->time());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WTimeSpan::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:HSS.Times.WTimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  const WTimeSpan* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WTimeSpan>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:HSS.Times.WTimeSpan)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:HSS.Times.WTimeSpan)
    MergeFrom(*source);
  }
}

void WTimeSpan::MergeFrom(const WTimeSpan& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:HSS.Times.WTimeSpan)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.time().size() > 0) {

    time_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.time_);
  }
}

void WTimeSpan::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:HSS.Times.WTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WTimeSpan::CopyFrom(const WTimeSpan& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:HSS.Times.WTimeSpan)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WTimeSpan::IsInitialized() const {
  return true;
}

void WTimeSpan::Swap(WTimeSpan* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WTimeSpan::InternalSwap(WTimeSpan* other) {
  using std::swap;
  time_.Swap(&other->time_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WTimeSpan::GetMetadata() const {
  protobuf_wtime_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_wtime_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Times
}  // namespace HSS
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HSS::Times::WTime* Arena::CreateMaybeMessage< ::HSS::Times::WTime >(Arena* arena) {
  return Arena::CreateInternal< ::HSS::Times::WTime >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::HSS::Times::WTimeSpan* Arena::CreateMaybeMessage< ::HSS::Times::WTimeSpan >(Arena* arena) {
  return Arena::CreateInternal< ::HSS::Times::WTimeSpan >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
